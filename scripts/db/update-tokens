#!/usr/bin/env node
const axios = require("axios");
const dotenv = require("dotenv");
const { connect, disconnect } = require("mongoose");
dotenv.config();
const tokens = require("../../models/token").default;

const URI = process.env.MONGO_URI;
const DB_NAME = process.env.DB_NAME;
const ENDPOINT = process.env.UPDATE_TOKENS_ENDPOINT;
if (!URI || !DB_NAME || !ENDPOINT) {
  console.error("Error: Environment variables URI and DB_NAME must be set.");
  process.exit(1);
}

const main = async () => {
  try {
    let count = 0;
    let page = 1;

    await connect(URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
      dbName: DB_NAME,
    });
    console.log("Connected to the database");

    let response = await axios.get(ENDPOINT, { params: { page: page } });

    while (response.data.length > 0) {
      for (const token of response.data) {
        // Fields for inserting a new document
        const insertFields = {
          id: token.id,
          symbol: token.symbol,
          name: token.name,
          image: token.image,
          current_price: token.current_price,
          price_change_24h: token.price_change_24h,
          price_change_percentage_24h: token.price_change_percentage_24h,
          market_cap: token.market_cap,
          market_cap_rank: token.market_cap_rank,
          circulating_supply: token.circulating_supply,
          total_supply: token.total_supply,
          max_supply: token.max_supply,
          ath: token.ath,
          ath_date: token.ath_date,
          atl: token.atl,
          atl_date: token.atl_date,
          last_updated: token.last_updated,
        };

        // Fields for updating an existing document
        const updateFields = {
          current_price: token.current_price,
          price_change_percentage_24h: token.price_change_percentage_24h,
          market_cap: token.market_cap,
          market_cap_rank: token.market_cap_rank,
          ath: token.ath,
        };

        // Check if the document with the given 'id' exists
        const existingToken = await tokens.findOne({ id: token.id });

        if (existingToken) {
          // Update the fields if the document exists
          await tokens.updateOne({ id: token.id }, { $set: updateFields });
          console.log(`Updated token: ${token.name}`);
        } else {
          // Insert the document with selected fields if it doesn't exist
          const token = new tokens(insertFields);
          await token.save({ validateBeforeSave: false });
        }

        count += 1;
      }

      page += 1;
      response = await axios.get(ENDPOINT, { params: { page: page } });

      console.log(`${count} tokens processed (inserted or updated).`);
      console.log(`Page ${page - 1} processed.`);
    }

    console.log(`Total of ${count} tokens processed.`);
  } catch (error) {
    console.error("An error occurred during execution:", error);
  } finally {
    await disconnect();
    console.log("Connection closed");
    process.exit(0);
  }
};

main()
  .then(() => console.log("Done"))
  .catch((e) =>
    console.error("An error occurred during the main execution:", e)
  );
