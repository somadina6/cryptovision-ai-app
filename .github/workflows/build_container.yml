name: CryptoVision CI/CD
run-name: Build, Push, and Deploy Docker Image ${{ github.run_number }}

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push to DockerHub
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/cryptovision:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/cryptovision:cache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/cryptovision:cache,mode=max
          build-args: |
            GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
            GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
            NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}
            NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }}
            MONGO_URI=${{ secrets.MONGO_URI }}
            NEXT_PUBLIC_ECB_API_URL=${{ secrets.NEXT_PUBLIC_ECB_API_URL }}
            DB_NAME=${{ secrets.DB_NAME }}
            UPDATE_TOKENS_ENDPOINT=${{ secrets.UPDATE_TOKENS_ENDPOINT }}
            OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
            UPSTASH_REDIS_REST_URL=${{ secrets.UPSTASH_REDIS_REST_URL }}
            UPSTASH_REDIS_REST_TOKEN=${{ secrets.UPSTASH_REDIS_REST_TOKEN }}


  deploy:
    needs: build # This ensures deploy runs only after build is successful
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to DigitalOcean Droplet
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DROPLET_HOST }}
          username: ${{ secrets.DROPLET_USERNAME }}
          key: ${{ secrets.DROPLET_SSH_KEY }}

          passphrase: ""
          port: 22
          script: |
            docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
            docker pull ${{ secrets.DOCKER_USERNAME }}/cryptovision:latest
            docker stop webapp || true
            docker rm webapp || true
            docker run -d --name webapp -p 3000:3000 ${{ secrets.DOCKER_USERNAME }}/cryptovision:latest
